name: CICD Pipeline 

on:
  push:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.8

      - name: Compile
        run: mvn compile

      # 
  security-check:
    runs-on: self-hosted
    needs: compile

    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy

    - name: Trivy FS Scan
      run: trivy fs --format table -o fs-report.json .

    - name: Gitleaks Installation
      run: sudo apt install gitleaks -y
    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json

  test:
    runs-on: self-hosted
    needs: security-check
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Install Maven
      run: |
        sudo apt update
        sudo apt install maven -y
    - name: Unit Test Cases
      run: mvn test

  build_project:
    runs-on: self-hosted
    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build Project
      run: mvn package
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar 
        
  #   - uses: actions/checkout@v4
  #     with:
  #       # Disabling shallow clones is recommended for improving the relevancy of reporting
  #       fetch-depth: 0
  #   - name: SonarQube Scan
  #     uses: SonarSource/sonarqube-scan-action@v5.0.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        
  #   - name: SonarQube Quality Gate check
  #     id: sonarqube-quality-gate-check
  #     uses: sonarsource/sonarqube-quality-gate-action@master
  #     with:
  #       pollingTimeoutSec: 600
  #     env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  builds_docker_image_and_push:
    runs-on: self-hosted
    needs: build_project
    steps:
    - uses: actions/checkout@v4
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app  # this will download JAR to ./app folder
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region: us-east-1

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push image to ECR
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: 593793049417.dkr.ecr.us-east-1.amazonaws.com/githubactions/demo:latest
        file: ./Dockerfile
        